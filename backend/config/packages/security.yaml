# security:
#     password_hashers:
#         App\Entity\Users:
#             algorithm: auto

#     providers:
#         app_user_provider:
#             entity:
#                 class: App\Entity\Users
#                 property: email

#     firewalls:
#         dev:
#             pattern: ^/(_(profiler|wdt)|css|images|js)/
#             security: false

#         login:
#             pattern: ^/login
#             stateless: true
#             json_login:
#                 check_path: /login
#                 username_path: email
#                 password_path: password

#         main:  # Ajout d'un firewall principal
#             lazy: true
#             provider: app_user_provider
#             # user_checker: Symfony\Component\Security\Core\User\UserChecker
#             stateless: true
#             # jwt: ~
#             security: false

#         api:
#             pattern: ^/
#             stateless: true
#             # jwt: ~
#             security: false


#     access_control:
#         - { path: ^/login, roles: PUBLIC_ACCESS }
#         - { path: ^/subscription, roles: IS_AUTHENTICATED_FULLY }  # Ajout pour protÃ©ger /subscription
#         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

# when@test:
#     security:
#         password_hashers:
#             App\Entity\Users:
#                 algorithm: auto
#                 cost: 4  # Lowest possible value for bcrypt
#                 time_cost: 3  # Lowest possible value for argon
#                 memory_cost: 10  # Lowest possible value for argon

security:
    password_hashers:
        App\Entity\Users:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login
                username_path: email
                password_path: password

        main:
            lazy: true
            provider: app_user_provider
            stateless: true
            jwt: ~  # Activation du JWT

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/create, roles: PUBLIC_ACCESS } # ðŸš€ Permet de crÃ©er un utilisateur sans JWT
        - { path: ^/api/doc, roles: PUBLIC_ACCESS } # âœ… Autorise l'accÃ¨s Ã  Swagger UI sans authentification
        - { path: ^/api/subscription, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY } # SÃ©curise tous les autres endpoints API

when@test:
    security:
        password_hashers:
            App\Entity\Users:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
